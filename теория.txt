1.	Что подразумевается под тестовой средой?
QA environment  - отдельное окружение(программное и аппаратное), которое специально создается для проверки доработанного или новосозданного функционала. В этом случае мы не боимся, что ошибки попадут к конечному пользователю. Настраивается в соответствии с требованиями тестируемого приложения.
STLC — настройка тестовой среды

2.	В чем отличие build от release?
Build – сборка проекта, которая передается тестировщикам для тестирования внутри компании
Release – сборка проекта, которая передается заказчику (выкатка в прод для конечных пользователей)

3.	Основные фазы тестирования?
Pre-alfa testing – обсуждается, будет ли вестись дальше разработка(тестируется только внутри компании)
Alfa-testing
Beta-testing(тестирование пользователями), идет фикс багов
Релиз-кандидат – шлифовка, подфикшивание минорных багов, переводы, настройка локализации
Релиз

4.	Что такое импакт анализ?
Impact Analysis (импакт анализ) - это исследование, которое позволяет указать затронутые места (affected areas) в проекте при разработке новой или изменении старой функциональности, а также определить, насколько значительно они были затронуты. Затронутые области требуют большего внимания во время проведения регрессионного тестирования. Импакт анализ может быть полезным в следующих случаях:
•	есть изменения в требованиях;
•	получен запрос на внесение изменений в продукт;
•	ожидается внедрение нового модуля или функциональности в существующий продукт;
•	каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.
Как мы знаем, в настоящее время продукты становятся все более большими и комплексными, а компоненты все чаще зависят друг от друга. Изменение строчки кода в таком проекте может "сломать" абсолютно все. Информация о взаимосвязи и взаимном влиянии изменений могут помочь QA:
•	сфокусироваться на тестировании функциональности, где изменения были представлены;
•	принять во внимание части проекта, которые были затронуты изменениями и, возможно, пострадали;
•	не тратить время на тестирование тех частей проекта, которые не были затронуты изменениями.


5.	Критерии выбора тестов?
Требования к критериям:
1. обоснованность – тест для решения одной задачи отличается от теста для решения другой задачи
2. достаточность, т. е. критерий должен показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы;
2. полнота, т. е. в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку;
3. надежность, т. е. любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы;
4. проверяемость, т. е. критерий должен быть легко проверяемым, например, вычисляемым на тестах.
Классы критериев
1.	Структурные критерии используют информацию о структуре программы (критерии так называемого "белого ящика"). Данный класс критериев часто используется на этапах модульного и интеграционного тестирования (Unit testing, Integration testing).
2.	Функциональные критерии формулируются в описании требований к программному изделию ( критерии так называемого "черного ящика" )
3.	Критерии стохастического тестирования формулируются в терминах проверки наличия заданных свойств у тестируемого приложения, средствами проверки некоторой статистической гипотезы.
4.	Мутационные критерии. Подход базируется на следующих понятиях:
Мутации - мелкие ошибки в программе.
Мутанты - программы, отличающиеся друг от друга мутациями .
Метод мутационного тестирования - в разрабатываемую программу P вносят мутации, т.е. искусственно создают программы-мутанты P1, P2... Затем программа P и ее мутанты тестируются на одном и том же наборе тестов (X,Y).


6.	Принципы тестирования?
1.	Тестирование демонстрирует дефекты продукта, а не их отсутствие. Т может показать, что дефекты есть, но не может доказать, что их нет. Сколько бы успешных тестов не провели, нельзя утверждать, что нет таких тестов, которые не нашли бы ошибку
2.	Совершенное тестирование невозможно. Вместо попыток «протестировать все» нам нужен некий подход к тестированию (стратегия), который обеспечит правильный объем тестирования для данного проекта, данных заказчиков (и других заинтересованных лиц) и данного продукта. При определении, какой объем тестирования достаточен, необходимо учитывать уровень риска, включая технические риски и риски, связанные с бизнесом, и такие ограничения проекта как время и бюджет. Оценка и управление рисками – одна из наиболее важных активностей в любом проекте. 
3.	Раннее тестирование сохраняет время и деньги. Тестовые активности должны начинаться как можно раньше в цикле разработки и быть сфокусированы на определенных целях. Этот принцип связан с понятием «цена дефекта» (cost of defect). Цена дефекта существенно растет на протяжении жизненного цикла разработки ПО. Чем раньше обнаружен дефект, тем быстрее, проще и дешевле его исправить. Дефект, найденный в требованиях, обходится дешевле всего. Еще одно важное преимущество раннего тестирования – экономия времени. Тестовые активности могут начинаться еще до того, как написана первая строчка кода. По мере того, как готовятся требования и спецификации, тестировщики могут приступать к разработке и ревью тест-кейсов. И когда появится первая тестовая версия, можно будет сразу приступать к выполнению тестов.
4.	Накопление ошибок - обычно небольшое количество модулей содержит большинство дефектов
5.	Парадокс пестицида – если один и тот же текстовый модуль многократно применять к той же системе, он в конечном счете перестанет находить ошибки
6.	Недопустимость однотипного тестирования – каждый программный продукт тестируется разными методами
7.	Несоответствие требованиям – поиск и устранение проблемы не явл эффективным, если продукт не удовл требованиям и потребности пользователя

7.	Что такое независимое тестирование?
Для тестирования с нейтральным мышлением, иногда следует нанять независимую стороннюю организацию по тестированию, которая тщательно проверит ваш продукт на наличие сбоев, готовя его к развертыванию.  Тестирование по уровням независимости:
•	Программист тестирует свой код 
•	Тестирование проводится другим программистом в организации
•	Внутренняя команда тестирования 
•	Независимая организация тестирования
•	Когда программист проверяет свой код: создатель никогда не может быть хорошим критиком своей собственной работы. Программист знает свой код от и до. Их цель - создать продукт и отправить его в кратчайшие сроки. Вместо того, чтобы искать ошибки со всех возможных точек зрения, они будут искушены найти способы обойти найденные ошибки. 
•	Тестирование проводится другим программистом в организации: Компромисс - это найти кого-то в организации. Это может быть какой-то другой программист, который участвует в некоторых других проектах. Это дает определенный уровень независимости. Но проблема возникает из-за того же reporting manager. Менеджер может попросить программиста пропустить некоторые тесты, когда есть ограничения по времени. Это приведет к неполному тестированию продукта. Кроме того, если попросить других разработчиков провести тестирование, это приведет к развертыванию различных ресурсов в одном проекте. Это будет вредно для всей работы организации. 
•	Внутренняя команда тестирования: Наличие другой внутренней команды - это хорошее решение. Но поскольку они будут в организации, на них будут влиять ограничительные сроки. Кроме того, это будет дорого поддерживать внутреннюю команду. Команда может иметь доступ к ограниченным инструментам и программному обеспечению, таким образом, не отвечая требованиям всех проектов. Среда тестирования также будет варьироваться в зависимости от количества пользователей и числа выполненных интеграций. Затем тестирование будет проводиться в спешном порядке, что приведет к упущению некоторых ошибок, которые могут появиться после выпуска продукта. Решение, которое позаботится обо всех этих недостатках, - «Независимое тестирование». 
•	Почему независимое тестирование? Независимые тестирующие организации изучат все аспекты вашей продукции. Они работают с мышлением поиска недостатков и ошибок. Они не будут использовать ярлыки в процессе тестирования. И поскольку они не были частью процесса разработки, они будут проводить тесты на нейтральной основе, чтобы прежние интересы не мешали процессу тестирования. Мысль о поиске максимальных «точек останова» пойдет на пользу вашему продукту. Почти все сторонние тестирующие организации предоставят вам подробные отчеты об ошибках и предложат корректирующие меры. 

8.	Что такое тестирование со сдвигом влево?
В попытке перенести тестирование на более ранний этап жизненного цикла разработки при одновременном улучшении показателей качества, задачи смещаются влево в схеме жизненного цикла разработки ПО. По возможности, тестирование должно проводиться с самого начала фазы проектирования, чтобы построить соответствующую стратегию тестирования. Проще говоря, это подход к тестированию программного обеспечения и тестированию системы, при котором тестирование выполняется на более раннем этапе жизненного цикла. Ключевые преимущества:
•	Сокращение затрат 
•	Более высокое качество
•	Повышение эффективности 
•	Конкурентные преимущества
