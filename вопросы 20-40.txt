20.	Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)
Это вид тестирования ПО для поиска точек отказа в ПО, который проверяет систему на обработку исключительных ситуаций (срабатывание валидаторов на некорректные данные), а также проверяет, что вызываемая приложением функция не выполняется при срабатывании валидатора. Неожиданные условия могут быть чем угодно, от неправильного типа данных до хакерской атаки. Целью отрицательного тестирования является предотвращение сбоя приложений из-за некорректных входных данных. Просто проводя положительное тестирование, мы можем только убедиться, что наша система работает в нормальных условиях. Мы должны убедиться, что наша система может справиться с непредвиденными условиями, чтобы обеспечить 100% безошибочную систему. Типичные примеры: ввести неправильно составленный e-mail и номер телефона, загрузить файл не предусмотренного расширения или размера.  Для деструктивного тестирования существует множество способов его тестирования: 
•	Метод анализа точек отказа: это пошаговое прохождение системы, проводящее оценку того, что может пойти не так в разных точках. Для этой стратегии может быть использована помощь BA (Business Analyst). 
•	Экспертная проверка тестировщика: проанализируйте или дайте на ревью ваши Test вашему коллеге-тестировщику, который менее знаком с системой/функцией 
•	Бизнес-анализ тестовых случаев. Конечные пользователи или эксперты могут подумать о многих допустимых сценариях, которые иногда тестировщики могут не учитывать или упустить, так как все их внимание будет сосредоточено на тестировании требований. 
•	Проведите предварительное тестирование с использованием контрольных таблиц (run sheets). Исследовательское тестирование с использованием контрольных таблиц поможет определить, что было проверено, повторить тесты и позволит вам контролировать охват тестами. 
•	Используйте другой источник: вы можете попросить кого-нибудь сломать программный продукт и проанализировать различные сценарии.


21.	Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)
Это тип тестирования ПО, который включает в себя правильное взаимодействие с программным обеспечением. Другими словами, неразрушающее тестирование (NDT) также можно назвать позитивным тестированием или тестированием «счастливого пути». Это дает ожидаемые результаты и доказывает, что программное обеспечение ведет себя так, как ожидалось. Пример: - Ввод правильных данных в модуль входа в систему и проверка, принимает ли он учетные данные и переходит на следующую страницу

22.	Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)
Модульное (компонентное) тестирование (unit testing, module testing, component testing) направлено на проверку отдельных небольших частей приложения, которые (как правило) можно исследовать изолированно от других подобных частей.
•	Модульное тестирование (юнит-тестирование) - тесты используются для тестирования какого-либо одного логически выделенного и изолированного элемента системы (отдельные методы класса или простая функция, subprograms, subroutines, классы или процедуры) в коде. Очевидно, что это тестирование методом белого ящика и чаще всего оно проводится самими разработчиками. Целью тестирования модуля является не демонстрация правильного функционирования модуля, а демонстрация наличия ошибки в модуле, а также в определении степени готовности системы к переходу на следующий уровень разработки и тестирования. На уровне модульного тестирования проще всего обнаружить дефекты, связанные с алгоритмическими ошибками и ошибками кодирования алгоритмов, типа работы с условиями и счетчиками циклов, а также с использованием локальных переменных и ресурсов. Ошибки, связанные с неверной трактовкой данных, некорректной реализацией интерфейсов, совместимостью, производительностью и т.п. обычно пропускаются на уровне модульного тестирования и выявляются на более поздних стадиях тестирования. Изоляция тестируемого блока достигается с помощью заглушек (stubs), манекенов (dummies) и макетов (mockups). Являясь по способу исполнения структурным тестированием или тестированием "белого ящика", модульное тестирование характеризуется степенью, в которой тесты выполняют или покрывают логику программы (исходный текст). 
Unit testing	Component testing
Тестирование отдельных программ, модулей, функций для демонстрации того, что программа выполняется согласно спецификации	Тестирование каждого объекта или частей программного обеспечения отдельно с или без изоляции других объектов
Проверка в(на) соответствии с design documents	Проверка в(на) соответствии с test requirements, use case
Пишутся и выполняются(обычно) разработчиками	Тестировщиками
Выполняется первым	Выполняется после Unit
Другой источник: Разница между компонентным и модульным тестированием: По-существу эти уровни тестирования представляют одно и тоже, разница лишь в том, что в компонентном тестировании в качестве параметров функций используют реальные объекты и драйверы, а в модульном тестировании - конкретные значения.

23.	Что подразумевается под интеграционным тестированием?
Интеграционное тестирование (integration testing) направлено на проверку взаимодействия между несколькими частями приложения (каждая из которых, в свою очередь, проверена отдельно на стадии модульного тестирования).
Интеграционное тестирование предназначено для проверки насколько хорошо два или более модулей ПО взаимодействуют друг с другом, а также взаимодействия с различными частями системы (операционной системой, оборудованием либо связи между различными системами). С технологической точки зрения интеграционное тестирование является количественным развитием модульного. Основная разница между модульным и интеграционным тестированием состоит в целях, то есть в типах обнаруживаемых дефектов, которые, в свою очередь, определяют стратегию выбора входных данных и методов анализа. 
Уровни интеграционного тестирования:
•	Компонентный интеграционный уровень (Component Integration testing): Проверяется взаимодействие между компонентами системы после проведения компонентного тестирования.
•	Системный интеграционный уровень (System Integration testing): Проверяется взаимодействие между разными системами после проведения системного тестирования.
Подходы к интеграционному тестированию:
•	Подход Большого взрыва:
•	Инкрементальный подход:
o	Нисходящий подход
o	Подход снизу-вверх
o	Сэндвич-подход
Некоторые утверждают, что всех участников (например, вызываемые классы) тестируемого субъекта следует заменить на имитации (mocks) или заглушки (stubs), чтобы создать идеальную изоляцию, избежать побочных эффектов и сложной настройки теста. Другие утверждают, что на имитации и заглушки следует заменять только участников, которые замедляют тест или проявляют сильные побочные эффекты (например, классы с доступом к БД или сетевыми вызовами). Иногда эти два вида юнит-тестов называют одинокими (solitary) в случае тотального применения имитаций и заглушек или общительными (sociable) в случае реальных коммуникаций с другими участниками. Информация должна приходить в течение нескольких секунд или нескольких минут с быстрых тестов на ранних этапах конвейера. И наоборот, более длительные тесты — обычно с более широкой областью — размещаются на более поздних этапах, чтобы не тормозить фидбек от быстрых тестов. Как видите, этапы конвейера развертывания определяются не типами тестов, а их скоростью и областью действия. Поэтому очень разумно может быть разместить некоторые из самых узких и быстрых интеграционных тестов на ту же стадию, что и юнит-тесты — просто потому что они дают более быструю обратную связь 

24.	Разница между Unit testing и Integration testing?
Именно здесь больше всего споров о названиях. «Область» интеграционных тестов также весьма противоречива, особенно по характеру доступа к приложению (тестирование в черном или белом ящике; разрешены mock-объекты или нет). На практике получается так: если тест…
•	использует базу данных,
•	использует сеть для вызова другого компонента/приложения,
•	использует внешнюю систему (например, очередь или почтовый сервер),
•	читает/записывает файлы или выполняет другие операции ввода-вывода,
•	полагается не на исходный код, а на бинарник приложения,
… то это интеграционный, а не модульный тест
Подведем итог: хотя теоретически можно использовать только интеграционные тесты, на практике
•	Юнит-тесты легче поддерживать.
•	Юнит-тесты легко воспроизводят пограничные случаи и редкие ситуации.
•	Юнит-тесты выполняются гораздо быстрее интеграционных тестов.
•	Сбойные юнит-тесты легче исправить, чем интеграционные.
Если у вас есть только интеграционные тесты, то вы впустую тратите и время разработки, и деньги компании. Нужны как модульные, так и интеграционные тесты одновременно. Они не взаимоисключающие.

25.	Что такое системное интеграционное тестирование? (SIT — System Integration testing) 
Это тип тестирования программного обеспечения, проводимого в интегрированной аппаратной и программной среде для проверки поведения всей системы. Это тестирование, проведенное на полной интегрированной системе для оценки соответствия системы ее установленным требованиям. SIT выполняется для проверки взаимодействия между модулями программной системы. Оно занимается проверкой требований к программному обеспечению высокого и низкого уровня, указанных в Software Requirements Specification/Data and the Software Design Document. Он также проверяет сосуществование программной системы с другими и тестирует интерфейс между модулями программного приложения. В этом типе тестирования модули сначала тестируются индивидуально, а затем объединяются в систему. Например, программные и / или аппаратные компоненты объединяются и тестируются постепенно, пока не будет интегрирована вся система.

26.	В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)
Тестовый драйвер - это фрагмент кода, который вызывает тестируемый программный компонент. Это полезно при тестировании по принципу «снизу-вверх». Тестовая заглушка - это фиктивная программа, которая интегрируется с приложением для полной функциональности. Они актуальны для тестирования, в котором используется нисходящий подход. Давайте возьмем пример.  1. Допустим, есть сценарий для проверки интерфейса между модулями A и B. Мы разработали только модуль-A. Затем мы можем проверить модуль-A, если у нас есть реальный модуль-B или фиктивный модуль для него. В этом случае мы называем модуль-B тестовой заглушкой.  2. Теперь модуль B не может отправлять или получать данные напрямую из модуля A. В таком сценарии мы перемещаем данные из одного модуля в другой, используя некоторые внешние функции, называемые Test Driver. Заглушки и драйверы не реализуют всю логику программного модуля, а только моделируют обмен данными с вызывающим модулем. Заглушка: вызывается тестируемым модулем. Драйвер: вызывает модуль для тестирования.

27.	Что подразумевается под системным тестированием?
Системное тестирование (system testing, end-to-end testing) направлено на проверку всего приложения как единого целого, собранного из частей, проверенных на двух предыдущих стадиях. Здесь не только выявляются дефекты «на стыках» компонентов, но и появляется возможность полноценно взаимодействовать с приложением с точки зрения конечного пользователя.
Системное тестирование рассматривает тестируемую систему в целом и оперирует на уровне пользовательских интерфейсов, в отличие от последних фаз интеграционного тестирования, которое оперирует на уровне интерфейсов модулей. Различны и цели этих уровней тестирования. На уровне системы часто сложно и малоэффективно анализировать прохождение тестовых траекторий внутри программы или отслеживать правильность работы конкретных функций. Основная задача системного тестирования - в выявлении дефектов, связанных с работой системы в целом, таких как неверное использование ресурсов системы, непредусмотренные комбинации данных пользовательского уровня, несовместимость с окружением, непредусмотренные сценарии использования, отсутствующая или неверная функциональность, неудобство в применении и тому подобное. Системное тестирование производится над проектом в целом с помощью метода "черного ящика". Структура программы не имеет никакого значения, для проверки доступны только входы и выходы, видимые пользователю. Категории тестов системного тестирования:
•	Полнота решения функциональных задач.
•	Стрессовое тестирование - на предельных объемах нагрузки входного потока.
•	Корректность использования ресурсов (утечка памяти, возврат ресурсов).
•	Оценка производительности.
•	Эффективность защиты от искажения данных и некорректных действий.
•	Проверка инсталляции и конфигурации на разных платформах.
•	Корректность документации
Для минимизации рисков, связанных с особенностями поведения системы в той или иной среде, во время тестирования рекомендуется использовать окружение максимально приближенное к тому, на которое будет установлен продукт после выдачи. Системное тестирование относят к черному ящику. Можно выделить два подхода к системному тестированию:
•	на базе требований (requirements based): Для каждого требования пишутся Test case, проверяющие выполнение данного требования.
•	на базе случаев использования (use case based): На основе представления о способах использования продукта создаются случаи использования системы (Use Cases). По конкретному случаю использования можно определить один или более сценариев. На проверку каждого сценария пишутся Test case, которые должны быть протестированы.

28.	Что такое функциональное тестирование?
Функциональное тестирование (functional testing) — вид тестирования, направленный на проверку корректности работы функциональности приложения (корректность реализации функциональных требований).
Функциональное тестирование рассматривает заранее указанное поведение и основывается на анализе спецификаций функциональности компонента или системы в целом. Функциональные тесты основываются на функциях, выполняемых системой, и могут проводиться на всех уровнях тестирования (компонентном, интеграционном, системном, приемочном). Как правило, эти функции описываются в требованиях, функциональных спецификациях или в виде случаев использования системы (use cases). Тестирование в перспективе «требования» использует спецификацию функциональных требований к системе как основу для дизайна Test case. В этом случае необходимо сделать список того, что будет тестироваться, а что нет, приоритезировать требования на основе рисков (если это не сделано в документе с требованиями), а на основе этого приоритезировать тестовые сценарии. Это позволит сфокусироваться и не упустить при тестировании наиболее важный функционал. Тестирование в перспективе «бизнес-процессы» использует знание этих самых бизнес-процессов, которые описывают сценарии ежедневного использования системы. В этой перспективе тестовые сценарии (test scripts), как правило, основываются на случаях использования системы (use cases). Преимущества функционального тестирования:
•	имитирует фактическое использование системы;
Недостатки функционального тестирования:
•	возможность упущения логических ошибок в программном обеспечении;
•	вероятность избыточного тестирования.

29.	Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)
Compatibility testing - Тестирование, направленное на проверку способности приложения работать в указанном окружении.
Здесь может проверяться:
•	Совместимость с аппаратной платформой, операционной системой и сетевой инфраструктурой (конфигурационное тестирование, configuration testing).
•	Совместимость с браузерами и их версиями (кросс-браузерное тестирование, crossbrowser testing). 
•	Совместимость с мобильными устройствами (mobile testing)
Тестирование взаимодействия - функциональное тестирование, проверяющее способность приложения/устройства взаимодействовать с одним и более компонентами/системами/устройствами и включающее в себя тестирование совместимости (compatibility testing) и интеграционное тестирование (integration testing).  ПО с хорошими характеристиками взаимодействия может быть легко интегрировано с другими системами, не требуя каких-либо серьезных модификаций. В этом случае, количество изменений и время, требуемое на их выполнение, могут быть использованы для измерения возможности взаимодействия. Например, тестирование совместимости проводится между смартфонами и планшетами для проверки передачи данных через Bluetooth. Существуют разные уровни тестирования совместимости:
•	Аппаратное обеспечение: проверяет совместимость программного обеспечения с различными аппаратными конфигурациями. 
•	Операционные системы: Он проверяет ваше программное обеспечение на совместимость с различными операционными системами, такими как Windows, Unix*, Mac OS и т. д. 
•	Программное обеспечение: проверяет ваше разработанное программное обеспечение на совместимость с другим программным обеспечением. Например, приложение MS Word должно быть совместимо с другими программами, такими как MS Outlook, MS Excel, VBA и т. д. 
•	Сеть: оценка производительности системы в сети с различными параметрами, такими как пропускная способность, скорость работы, емкость. 
•	Браузер: проверяет совместимость вашего сайта с различными браузерами, такими как Firefox, Google Chrome, Internet Explorer и т. д. 
•	Устройства: проверяет совместимость вашего программного обеспечения с различными устройствами, такими как устройства USB-порта, принтеры и сканеры, другие мультимедийные устройства и Bluetooth. 
•	Mobile: проверка совместимости вашего программного обеспечения с мобильными платформами, такими как Android, iOS и т. д. 
•	Версии программного обеспечения. Он проверяет совместимость вашего программного приложения с различными версиями программного обеспечения. Например, проверка вашего Microsoft Word на совместимость с Windows 7, Windows 7 SP1, Windows 7 SP2, Windows 7 SP3.
Существует два типа проверки версий:
•	Тестирование обратной совместимости предназначено для проверки поведения разработанного аппаратного / программного обеспечения с использованием более старых версий аппаратного / программного обеспечения. 
•	Тестирование прямой совместимости заключается в проверке поведения разработанного аппаратного / программного обеспечения с использованием более новых версий аппаратного / программного обеспечения.
Пример тестирования взаимодействия: 
•	Подключите (connect) два или более устройств от разных производителей 
•	Проверьте связь между устройствами 
•	Проверьте, может ли устройство отправлять / получать пакеты или фреймы друг от друга 
•	Проверьте, правильно ли обрабатываются данные на уровне сети и объектов 
•	Проверьте, правильно ли работают реализованные алгоритмы 
•	Результат в порядке: проверьте следующий результат. Результат не в порядке: используйте инструменты мониторинга, чтобы обнаружить источник ошибки 
•	Отчет о результатах в тестовом отчете.

30.	Что такое тестирование на соответствие? (Conformance/Compilance testing)
CONFORMANCE testing - это тип тестирования программного обеспечения, который удостоверяет, что система программного обеспечения соответствует стандартам и правилам, определенным IEEE, W3C или ETSI. Цель проверки соответствия состоит в том, чтобы определить, в какой степени отдельная реализация конкретного стандарта соответствует индивидуальным требованиям этого стандарта. Включает в себя: 
•	Производительность
•	Функции 
•	Прочность (Robustness)
•	Совместимость (Interoperability) 
•	Поведение системы
Тестирование соответствия может быть логическим или физическим, и оно включает в себя следующие типы тестирования: 
•	Тестирование на соответствие (Compliance testing)
•	Нагрузочное тестирование (Load testing)
•	Стресс тестирование (Stress testing)
•	Объемное тестирование (Volume testing)
Conformance testing	Compliance testing
Conformance является формальным и точным способом тестирования стандартов	Compliance является неформальным и менее точным способом тестирования стандартов
Сертификация Conformance применима только к операционной системе, имеющей официальный Certification Authority	Операционная система, которая обеспечивает единый API (Portable Operating System Interface), считается совместимой
Conformance testing используется для тестирования системы, которая обеспечивает полную поддержку данных стандартов	Compliance testing используется для тестирования системы, обеспечивающей поддержку некоторых из указанных стандартов
Тестирование соответствия также называется Type testing, который является формальным способом тестирования.

31.	Что такое нефункциональное тестирование?
НЕФУНКЦИОНАЛЬНОЕ тестирование - тип тестирования ПО для проверки нефункциональных аспектов ПО. Оно предназначено для проверки готовности системы по нефункциональным параметрам, которые никогда не учитываются при функциональном тестировании.
•	Нефункциональное тестирование должно повысить удобство использования, эффективность, ремонтопригодность и portability продукта. 
•	Помогает снизить производственный риск и затраты, связанные с нефункциональными аспектами продукта. 
Позволяет:
•	оптимизировать способ установки, настройки, выполнения, управления и мониторинга продукта. 
•	Собирать и производить измерения и метрики для внутренних исследований и разработок. 
•	Улучшать и расширять знания о поведении продукта и используемых технологиях.
Основные нефункциональные типы тестирования:
•	Производительности (Performance)
o	Стрессовое (Stress testing)
o	Тестирование емкости/способностей (Capacity testing)
o	Нагрузочное (Load testing)
o	Объемное тестирование (Volume testing)
o	Выносливости/стабильности/надежности (Soak/Endurance/Stability/Reliability testing)
o	Шиповое (Spike)
o	Масштабируемости (Scalability Test)
•	Тестирование времени отклика (Response Time testing)
•	Тестирование на отказоустойчивость (Failover testing)
•	Тестирование совместимости (Compatibility testing)
•	Тестирование на удобство пользования (Usability testing)
•	Тестирование на поддерживаемость/ремонтопригодность (Maintainability testing)
•	Тестирование безопасности (Security testing)
•	Тестирование аварийного восстановления (Disaster Recovery testing)
•	Тестирование на соответствие (Compliance testing)
•	Тестирование переносимости (Portability testing)
•	Тестирование эффективности (Efficiency testing)
•	Базовое тестирование (Baseline testing)
•	Тестирование документации (Documentation testing)
•	Тестирование восстановления (Recovery testing)
•	Интернационализация (Globalization/Internationalization testing)
•	Тестирование локализации (Localization testing)

32.	Что вы знаете о Тестировании удобства пользования?
Тестирование удобства пользования - это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий. Тестирование удобства пользования дает оценку уровня удобства использования приложения по следующим пунктам:
•	производительность, эффективность (efficiency) - сколько времени и шагов понадобится пользователю для завершения основных задач приложения, например, размещение новости, регистрации, покупка и т. д. ? (меньше - лучше)
•	правильность (accuracy) - сколько ошибок сделал пользователь во время работы с приложением? (меньше - лучше)
•	активизация в памяти (recall) – как много пользователь помнит о работе приложения после приостановки работы с ним на длительный период времени? (повторное выполнение операций после перерыва должно проходить быстрее чем у нового пользователя)
•	эмоциональная реакция (emotional response) – как пользователь себя чувствует после завершения задачи - растерян, испытал стресс? Порекомендует ли пользователь систему своим друзьям? (положительная реакция - лучше)
Проверка удобства использования может проводиться как по отношению к готовому продукту, посредством тестирования черного ящика (black box testing), так и к интерфейсам приложения (API), используемым при разработке - тестирование белого ящика (white box testing). В этом случае проверяется удобство использования внутренних объектов, классов, методов и переменных, а также рассматривается удобство изменения, расширения системы и интеграции ее с другими модулями или системами. Использование удобных интерфейсов (API) может улучшить качество, увеличить скорость написания и поддержки разрабатываемого кода, и как следствие улучшить качество продукта в целом. Отсюда становится очевидно, что тестирование удобства пользования может производиться на разных уровнях разработки ПО: модульном, интеграционном, системном и приемочном.

33.	Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
USABILITY testing показывает, насколько проста в использовании и удобна система программного обеспечения. Здесь небольшой набор целевых конечных пользователей «использует» программную систему для выявления дефектов юзабилити. Основное внимание в этом тестировании уделяется простоте использования приложения пользователем, гибкости в управлении средствами управления и способности системы выполнять свои задачи. Это также называется тестированием пользовательского опыта (UX – "Ю-Экс", user experience). Это тестирование рекомендуется на начальном этапе разработки SDLC, что позволяет лучше понять ожидания пользователей. Исследования (Virzi, 1992 и Neilsen Landauer, 1993) показывают, что 5 пользователей достаточно для выявления 80% проблем с юзабилити, хотя некоторые исследователи предлагают другие цифры. Тестирование доступности (accessibility testing) - это подмножество юзабилити-тестирования. Его цель - убедиться в том, что наш продукт удобен в использовании для людей с различными видами инвалидности или особенностей восприятия. Это могут быть проблемы со зрением, слухом или ограничения в подвижности рук.  Ваш продукт должен правильно работать с соответствующим ПО. Примеры такого программного обеспечения:
•	Speech Recognition Software - ПО преобразует произнесенное слово в текст, который служит вводом для компьютера. 
•	Программа для чтения с экрана - используется для озвучивания текста, отображаемого на экране 
•	Программное обеспечение для увеличения экрана - используется для увеличения масштаба элементов и облегчения чтения для пользователей с нарушениями зрения. 
•	Специальная клавиатура, облегчающая ввод для пользователей, у которых проблемы с двигательными функциями.
Еще один из примеров - люди с цветовой слепотой (дальтонизмом). Эта особенность довольно широко распространена. Различными видами цветовой слепоты страдают около 8 % мужчин и 0,4 % женщин - не так уж мало! Цвет не должен быть единственным способом передачи информации. Если вы используете цвет для того, чтобы, допустим, отобразить статус, эту информацию стоит продублировать еще каким-то образом - геометрическими фигурами, иконками или текстовым комментарием. Хорошая контрастность. Хорошая контрастность обеспечивает нормальную видимость элементов управления и текста даже для людей, не различающих те или иные оттенки. Есть отличный инструмент для тестирования веб-сайтов на предмет доступности для людей с различными формами цветовой слепоты: Color Blind Web Page Filter.  
Если вы хотите сократить количество тестов, можно ограничиться только тремя фильтрами: дейтеранопия, протанопия и тританопия. Это наиболее выраженные формы цветовой слепоты (не считая крайне редкого черно-белого зрения). Остальные люди с особенностями цветовосприятия видят больше оттенков, и если ваш UI достаточно хорошо виден с этими тремя фильтрами, то и для остальных будет отображаться корректно. Пример чек-листа:
•	Предоставляет ли приложение клавиатурные эквиваленты для всех действий мышью и окон? 
•	Предоставляются ли инструкции как часть пользовательской документации или руководства? Легко ли понять и использовать приложение, используя документацию? 
•	Упорядочены ли вкладки логически для обеспечения плавной навигации? 
•	Предусмотрены ли сочетания клавиш для меню? 
•	Поддерживает ли приложение все операционные системы? 
•	Четко ли указано время отклика каждого экрана или страницы, чтобы конечные пользователи знали, как долго ждать? 
•	Все ли надписи правильно написаны? 
•	Являются ли цвета подходящим для всех пользователей? 
•	Правильно ли используются изображения или значки, чтобы их было легко понять конечным пользователям? 
•	Есть ли звуковые оповещения? 
•	Может ли пользователь настроить аудио или видео элементы управления? 
•	Может ли пользователь переопределить шрифты по умолчанию для печати и отображения текста? 
•	Может ли пользователь настроить или отключить мигание, вращение или перемещение элементов? 
•	Убедитесь, что цветовое кодирование никогда не используется в качестве единственного средства передачи информации или указания на действие 
•	Видна ли подсветка с инвертированными цветами? 
•	Тестирование цвета в приложении путем изменения контрастности 
•	Правильно ли слышат люди с ограниченными возможностями все имеющее отношение к аудио и видео?
•	Протестируйте все мультимедийные страницы без мультимедиа-оборудования. 
•	Предоставляется ли обучение пользователям с ограниченными возможностями, что позволит им ознакомиться с программным обеспечением или приложением?

34.	Что такое тестирование интерфейса?
Это тип интеграционного теста, который проверяет, правильно ли установлена связь между двумя различными программными системами или их частями (модулями). Соединение, которое объединяет два компонента, называется интерфейсом. Этот интерфейс в компьютерном мире может быть чем угодно, как API, так и веб-сервисами и т. д.  Тестирование этих подключаемых сервисов или интерфейса называется Тестированием интерфейса. Тестирование интерфейса включает в себя тестирование двух основных сегментов: 
•	Интерфейс веб-сервера и сервера приложений 
•	Интерфейс сервера приложений и базы данных

35.	Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
Что тестируем, на каком этапе, зачем тестируем
Тестирование рабочего процесса включает в себя имитацию производственной среды на этапе тестирования, чтобы ее можно было протестировать с точки зрения конечного пользователя.Тестовая база данных должна содержать достаточно данных испытаний, чтобы каждый рабочий процесс мог быть тщательно протестирован
Это тип тестирования программного обеспечения, который проверяет, что каждый software workflow точно отражает данный бизнес-процесс. Workflow - это серия задач для получения желаемого результата, которая обычно включает несколько этапов или шагов. Для любого бизнес-процесса тестирование этих последовательных шагов определяется как «WorkFlow testing». Например, убедитесь, что система может быть установлена на платформе пользователя и работает правильно. Тестирование рабочего процесса проводится поэтапно. Вот как вы будете выполнять Workflow testing:
•	Начальная фаза (Inception phase): эта фаза включает начальное планирование испытаний и тестирование прототипа 
•	Фаза разработки (Elaboration phase): Эта фаза включает базовую архитектуру тестирования 
•	Фаза строительства (Construction phase): эта фаза включает в себя значительные испытания в каждой сборке 
•	Фаза перехода (Transition phase): Эта фаза включает в себя регрессионные тесты и повторные тесты исправлений
Тестирование workflow выполняется:
•	Test engineer: планирует цели теста и график. Определяет Test case и процедуры. Оценивает результаты теста.
•	Component engineer: Разработка тестовых компонентов. Автоматизирует некоторые тестовые процедуры.
•	Integration Tester: Выполнение интеграционных тестов и выявление дефектов 
•	System Testers: Выполнение системных тестов и отчеты о дефектах

36.	Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
Пользовательское приемочное тестирование (UAT) - это тип тестирования, выполняемый конечным пользователем или клиентом для проверки / принятия ПО перед его перемещением в production. UAT выполняется на заключительном этапе тестирования после выполнения функциональных, интеграционных и системных испытаний. Основной целью UAT является проверка end-to-end business flow. Он не фокусируется на косметических ошибках, орфографических ошибках или тестировании системы. Приемочное тестирование пользователя выполняется в отдельной среде тестирования с настройкой данных, аналогичных производственным. Это своего рода тестирование черного ящика, в котором будут участвовать два или более конечных пользователя. Этапы:
•	Анализ бизнес-требований 
•	Создать плана тестирования UAT 
•	Определить Test Scenario 
•	Создать Test case UAT 
•	Подготовить Test Data (Production like Data) 
•	Запустить Test case
•	Записать результаты
•	Подтвердить бизнес-цели

37.	Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)
ИСПЫТАНИЕ НА ЭКСПЛУАТАЦИЮ (OAT) - это тип тестирования программного обеспечения, который оценивает операционную готовность программного приложения до его выпуска в производство. Целью эксплуатационного тестирования является обеспечение бесперебойной работы системы в ее стандартной операционной среде (SOE - standard operating environment). Это также называется Оперативное тестирование (Operational testing). Эксплуатационное приемочное тестирование обеспечивает соответствие системы и компонентов в стандартной операционной среде приложения (SOE). Типы OAT:
•	Installation testing
•	Load & Performance Test Operation
•	Backup and Restore testing
•	Security testing
•	Code Analysis
•	Fail over testing
•	Recovery testing
•	End-to-End Test Environment Operational testing
•	Operational Documentation Review
Примеры Test case:
•	Резервные копии, сделанные на одном сайте, могут быть развернуты на тот же сайт 
•	Резервные копии, сделанные на одном сайте, можно развернуть на другом сайте. 
•	Внедрение любых новых функций в живую производственную среду не должно отрицательно влиять на целостность текущих производственных услуг. 
•	Процесс внедрения может быть воспроизведен с использованием действующей документации 
•	Каждый компонент может быть отключен и успешно запущен в согласованные сроки. 
•	Для оповещений - все критические оповещения должны идти в TEC и ссылаться на документ правильного разрешения. 
•	Оповещения созданы и выдаются при превышении согласованных пороговых значений 
•	Любая документация по восстановлению, созданная или измененная, включая сервисные диаграммы, действительна 
•	Это должно быть передано в соответствующие области поддержки. 
•	Любой компонент, на который влияет сбой, должен показывать рекомендуемый порядок перезапуска, время завершения и т. д. 

38.	Что такое инсталляционное тестирование?
Тестирование инсталляции (установки) направленно на проверку успешной инсталляции и настройки, а также обновления или удаления ПО, как десктопного, так и мобильного. Тестирование инсталляции в большинстве своем не входит в Веб-тестирование, являясь специализированным тестированием установки приложений на различные операционные системы. Следующие проверки должны быть выполнены для этапов: Установка. 
•	Установка должна начаться при клике по кнопке, подтверждающей данное действие
•	Установки во всех поддерживаемых окружениях и на всех поддерживаемых платформах
•	Установки в неподдерживаемых окружениях, а также в нужных окружениях с некорректными настройками
•	Права, которые требует инсталляция (чаще всего они должны быть админскими), проверить установить приложение как гость
•	Установки в clean state (при отсутствии любых возможных связанных файлов и предыдущих версий)
•	Подсчитывается ли при установке количество свободного места на диске и выдается ли предупреждение если места недостаточно
•	Установки загруженного ранее приложения, а также прямая установка с использованием сети/беспроводного соединения
•	Восстановится ли процесс установки при внезапном его прерывании (отключение устройства, отказ сети, отключение беспроводного соединения)
•	Установка приложения, его запуск, удаление приложения должны возвращать систему в исходное состояние
•	Распознается ли наличие в системе приложений/программ, необходимых для корректной работы устанавливаемого приложения
•	Повторный запуск установки приложения при уже текущем должен выдавать корректное сообщение, двойная установка должна быть исключена
•	Процесс установки может быть настраиваемый/дефолтный. Убедиться, что оба корректно работают
•	Наличие кнопки, которая предложит сохранить приложение в определенную папку, а также указывает дефолтное местоположение ("C:/programs/.")
•	Правильно ли установлены, сохранены ли в корректных папках файлы приложения
•	Наличие созданных ярлыков, корректно ли они расположены
•	После установки в системной вкладке " Программы и компоненты" должны быть доступны: название приложения, иконка, имя издателя, размер приложения, дата установки и номер версии
•	Настройки переменных сред PATH
•	Убедиться, что лицензионный ключ сохраняется в Windows Registry library
•	Поддерживает ли приложение функции ‘UnInstall’, ‘Modify’, ‘ReInstall’ и корректно ли они работают
•	Работа приложения с уже существующими DLL-файлами, с DLL-файлами приложений, которые необходимы для корректной работы устанавливаемого приложения
•	Наличие информации/сообщение о том, когда истекает срок действия установленной пробной версии приложения
Обновление:
•	Поддерживает ли приложение функцию обновления/автообновления
•	При попытке установить ранее установленную версию приложения система должна ее распознать и выдать корректное сообщение
•	Сохраняются ли пользовательские настройки при попытке загрузить новую версию/обновить старую версию
•	При попытке обновить версию должны быть доступны функции удалить приложение и восстановить приложение
•	Стандартные проверки как при первичной установке приложения
•	Убедиться, что номер версии приложения сменился новым
•	Запустить приложение и убедиться, что оно работает корректно
Откат до предыдущей версии:
•	Попробовать установить старую версию на более новую
•	Наличие корректного сообщения при попытке отката
•	Убедиться, что приложение работает корректно
Удаление приложения:
•	Не остается ли в системе никаких папок/файлов/ярлыков/ключей реестра после полного удаления приложения
•	Корректно ли работает система после установки и последующего удаления приложения

39.	Что вы знаете о тестировании безопасности?
Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов. Общая стратегия безопасности основывается на трех основных принципах:
•	Конфиденциальность - сокрытие определенных ресурсов или информации
•	Целостность – ресурс может быть изменен только в соответствии с полномочиями пользователя
•	Доступность - ресурсы должны быть доступны только авторизованному пользователю, внутреннему объекту или устройству
Тестирование безопасности обычно выполняет отдельный специалист по безопасности. В ходе тестирования безопасности испытатель играет роль взломщика. Ему разрешено все:
•	попытки узнать пароль с помощью внешних средств;
•	атака системы с помощью специальных утилит, анализирующих защиты;
•	подавление, ошеломление системы (в надежде, что она откажется обслуживать других клиентов);
•	целенаправленное введение ошибок в надежде проникнуть в систему в ходе восстановления;
•	просмотр несекретных данных в надежде найти ключ для входа в систему.
При неограниченном времени и ресурсах хорошее тестирование безопасности взломает любую систему. Задача проектировщика системы — сделать цену проникновения более высокой, чем цена получаемой в результате информации. Типы тестирования безопасности:
•	Сканирование уязвимостей/оценка защищенности (Vulnerability Scanning) выполняется с помощью автоматизированного ПО для сканирования системы на наличие известных сигнатур уязвимостей. 
•	Сканирование безопасности (Security Scanning) включает в себя выявление слабых сторон сети и системы, а затем предоставляет решения для снижения этих рисков. Это сканирование может быть выполнено как ручным, так и автоматизированным.
•	Тестирование на проникновение (Penetration testing) - этот тип тестирования имитирует атаку злоумышленника. Это тестирование включает анализ конкретной системы для проверки потенциальных уязвимостей при попытке внешнего взлома. 
•	Оценка рисков (Risk Assessment) тестирование включает анализ рисков безопасности, наблюдаемых в организации. Риски классифицируются как Низкие, Средние и Высокие. Это тестирование рекомендует меры по снижению риска. 
•	Аудит безопасности (Security Auditing) - внутренняя проверка приложений и операционных систем на наличие уязвимостей. Аудит также может быть выполнен путем построчной проверки кода 
•	Этический взлом (Ethical hacking) - совершается с целью выявления проблем безопасности в системе. Это делается White Hat хакерами - это специалисты по безопасности, которые использует свои навыки законным способом для помощи в выявлении дефектов системы, в отличии от Black Hat (преступников) или Gray Hat (что-то между).
•	Оценка состояния (Posture Assessment) объединяет сканирование безопасности, этический взлом и оценки рисков, чтобы показать общее состояние безопасности организации.
SDLC фаза	Security Processes
Requirements	Анализ безопасности для требований и проверка случаев злоупотребления / неправильного использования
Design	Анализ рисков безопасности для проектирования. Разработка плана тестирования с учетом тестирования безопасности
Coding and Unit testing	Статическое и динамическое тестирование безопасности и тестирование белого ящика 
Integration testing	Тестирование черного ящика
System testing	Тестирование черного ящика и сканирование уязвимостей
Implementation	Тестирование на проникновение, сканирование уязвимостей
Support	Анализ воздействия патчей

40.	Что такое конфигурационное тестирование?
Конфигурационное тестирование (Configuration testing) — специальный вид тестирования, направленный на проверку работы ПО при различных аппаратных и программных конфигурациях системы (заявленных платформах, поддерживаемых драйверах, при различных конфигурациях компьютеров и т. д. ) В зависимости от типа проекта конфигурационное тестирование может иметь разные цели:
•	Проект по профилированию работы системы Цель Тестирования: определить оптимальную конфигурацию оборудования, обеспечивающую требуемые характеристики производительности и времени реакции тестируемой системы.
•	Проект по миграции системы с одной платформы на другую Цель Тестирования: Проверить объект тестирования на совместимость с объявленным в спецификации оборудованием, операционными системами и программными продуктами третьих фирм.
Для клиент-серверных приложений конфигурационное тестирование можно условно разделить на два уровня (для некоторых типов приложений может быть актуален только один):
•	Серверный
•	Клиентский
На первом (серверном) уровне, тестируется взаимодействие выпускаемого ПО с окружением, в которое оно будет установлено:
•	Аппаратные средства (тип и количество процессоров, объем памяти, характеристики сети / сетевых адаптеров и т. д.)
•	Программные средства (ОС, драйвера и библиотеки, стороннее ПО, влияющее на работу приложения и т. д.)
Основной упор здесь делается на тестирование с целью определения оптимальной конфигурации оборудования, удовлетворяющего требуемым характеристикам качества (эффективность, портативность, удобство сопровождения, надежность). На следующем (клиентском) уровне, ПО тестируется с позиции его конечного пользователя и конфигурации его рабочей станции. На этом этапе будут протестированы следующие характеристики: удобство использования, функциональность. Для этого необходимо будет провести ряд тестов с различными конфигурациями рабочих станций:
•	Тип, версия и битность операционной системы (подобный вид тестирования называется кроссплатформенное тестирование)
•	Тип и версия Web браузера, в случае если тестируется Web приложение (подобный вид тестирования называется кросс-браузерное тестирование)
•	Тип и модель видеоадаптера (при тестировании игр это очень важно)
•	Работа приложения при различных разрешениях экрана
•	Версии драйверов, библиотек и т. д.  (для JAVA приложений версия JAVA машины очень важна, тоже можно сказать и для .NET приложений касательно версии .NET библиотеки)
и т. д.  Перед началом проведения конфигурационного тестирования рекомендуется:
•	создавать матрицу покрытия (матрица покрытия - это таблица, в которую заносят все возможные конфигурации),
•	проводить приоритезацию конфигураций (на практике, скорее всего, все желаемые конфигурации проверить не получится),
•	шаг за шагом, в соответствии с расставленными приоритетами, проверять каждую конфигурацию.
Уже на начальном этапе становится очевидно, что чем больше требований к работе приложения при различных конфигурациях рабочих станций, тем больше тестов нам необходимо будет провести. В связи с этим, рекомендуем, по возможности, автоматизировать этот процесс, так как именно при конфигурационном тестировании автоматизация реально помогает сэкономить время и ресурсы. Конечно же автоматизированное тестирование не является панацеей, но в данном случае оно окажется очень эффективным помощником. В итоге: конфигурационным называется тестирование совместимости выпускаемого продукта (ПО) с различным аппаратным и программным средствами. Основные цели - определение оптимальной конфигурации и проверка совместимости приложения с требуемым окружением (оборудованием, ОС и т. д.). Автоматизация конфигурационного тестирования позволяет избежать лишних расходов Примечание: в ISTQB вообще не говорится о таком виде тестирования как конфигурационное. Согласно глоссарию, данный вид тестирования рассматривается там как тестирование портируемости: configuration testing: See portability testing. portability testing: The process of testing to determine the portability of a software product.
