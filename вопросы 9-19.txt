9.	Почему тестирование делится на отдельные этапы?
Каждый этап испытаний имеет свое назначение 
Проще управлять поэтапно 
Мы можем запустить разные тесты в разных средах 
Производительность и качество тестирования улучшаются с помощью поэтапного тестирования

10.	Какие есть этапы тестирования?
Работа с требованиями. Знакомство с требованиями заказчика, что должен из себя представлять итоговый продукт, обсуждение.
Разработка стратегии тестирования. Оценка сроков тестирования, выявление среды тестирования, объединение всей информации, полученной при работе с требованиями.
Создание тестовой документации. Написание сценариев, которые позволят проверить функционал.
Тестирование прототипа. Тестирование основного функционала продукта, корректировка целей, добавление фичей. (Самый подходящий метод тестирования прототипа – проведение закрытого бета-тестирования, когда продукт тестирует продукт малое количество людей, которые в итоге будут использовать его после релиза. Это помогает учесть пожелания конечных пользователей.)
Основное тестирование. Выполнение общей проверки продукта. Непосредственно тестирование проводиться в несколько этапов, а внутри каждого этапа – цикл (тестирование -> анализ и исправление ошибки -> ретест), или общая проверка работоспособности (поставка\функциональность работает или не работает).  Пока рассмотрим только ручное тестирование, а автоматизацию оставим на для отдельной темы. В качестве основных этапов тестирования ПО, которые выполняет QA команда, можно выделить следующие:
•	Smoke testing и Sanity testing – предварительная проверка системы и поставки ПО. На этом этапе наша задача убедиться, что тестовая среда настроена и работает, а полученный билд содержит необходимый функционал или изменения и с ним можно продолжать работать. Т.о. мы делаем самые основные, базовые проверки.
•	Functional & non-functional testing – основной этап тестирования, который включает в себя все многообразие проверок разных типов разобранных в разделе «3 - Базовые знания по тестированию», направленных на изменения, добавленные в рамках поставки. На этом этапе мы проводим несколько циклов тестирования, как правило более 2.
•	Regression testing – проводим цикл регрессионного тестирования и проверяем, что новые фичи и изменения не сломали текущий функционал. Тут также несколько циклов. В принципе этот этап можно считать второй фазой предыдущего блока - Functional & non-functional testing.
•	Integration & end-to-end testing – на этом этапе мы проверяем как наш модуль, система или продукт будет взаимодействовать с другими модулями, системами и продуктами. Здесь мы проверяем всю цепочку действий пользователя при работе с системой. Например, пользователь делает заявку через сайт интернет магазина, далее заявка записывается в базу, далее обрабатывается и передается в систему для закупок и т.д. В этом случае мы должны настроить необходимое окружение и проверить весь жизненный цикл заявки, даже если мы доработали только одну систему в цепи.
•	Demo testing & User Acceptance Testing – этап демонстрации ПО заказчику \ пользователям, которые в свою очередь также могут (и в идеале должны) проводить свое тестирование продукта – UAT
Стабилизация. На данном этапе происходит работа над устранением багов.
Эксплуатация. Проводится регресс-тестирование, устранение ошибок, которые нашел конечный пользователь.


11.	Как вы тестируете продукт, если требования еще не зафиксированы?
Если спецификация требований недоступна для продукта, тогда план тестирования может быть создан на основе предположений, сделанных относительно продукта. Но мы должны хорошо документировать все предположения в плане тестирования. 


12.	Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?
Прежде всего, мы проверим, охватывает ли каждое требование хотя бы один Test case. Если да, то можно сказать, что тестовых примеров достаточно для тестирования продукта. 


13.	Что подразумевается под тестовыми данными? 
Тестовые данные - это набор входных значений, необходимых для выполнения Test case. тестировщики определяют данные в соответствии с требованиями. Они могут сделать это вручную или использовать инструменты генерации. 


14.	Что такое бета-тестирование?
Происходит на конечных пользователях и необходимо для обеспечения обратной связи.  Существуют различные типы бета-тестов в тестировании ПО, и они заключаются в следующем: 
•	Традиционное бета-тестирование: продукт распространяется на целевой рынок, и соответствующие данные собираются по всем аспектам. Эти данные могут быть использованы для улучшения продукта. 
•	Публичное бета-тестирование -публикация продукта во внешнем мире через онлайн-каналы, и данные могут быть получены от любого пользователя. 
•	Техническое бета-тестирование: продукт передается во внутреннюю группу организации и собирает отзывы / данные от сотрудников организации. 
•	Целевая бета-версия: продукт выпущен на рынок для сбора отзывов об особенностях программы. 
•	Бета-версия после выпуска. Продукт выпущен на рынок, и данные собираются для внесения улучшений в будущем выпуске продукта.


15.	Что означает пилотное тестирование? (Pilot)
PILOT testing - тип тестирования ПО, который проверяет компонент системы или всю систему в режиме реального времени. 
Целью - оценка осуществимости, времени, стоимости, риска и эффективности исследовательского проекта. Это тестирование проводится точно между UAT(приемочное тестирование) и Production. В пилотном тестировании выбранная группа конечных пользователей пробует тестируемую систему и предоставляет обратную связь до полного развертывания системы. Пилотное тестирование помогает в раннем обнаружении ошибок в Системе. Пилотное тестирование связано с установкой системы на площадке заказчика (или в среде, моделируемой пользователем) для тестирования на предмет постоянного и регулярного использования. Выявленные недостатки затем отправляются команде разработчиков в виде отчетов об ошибках, и эти ошибки исправляются в следующей сборке системы. Во время этого процесса иногда приемочное тестирование также включается как часть тестирования на совместимость. Это происходит, когда система разрабатывается для замены старой. 


16.	Что такое бизнес – логика?
	Бизнес – логика (domain) - это то, что конкретная программа по задумке должна сделать; это реализация правил и ограничений автоматизируемых операций. Это правила, которые должны соблюдаться в данной конкретной программе, определенные бизнес-клиентом. Слои приложения – слой пользовательского интерфейса, слой бизнес логики, слой сохранения данных.

17.	Какие существуют основные виды тестирования ПО?
ФуФункциональные виды («Что?» - проверяет весь функционал продукта):
1.	Функциональное тестирование (Functional testing)
2.	Тестирование взаимодействия (Interoperability testing)
Нефункциональное («Как?»):
- Производительности (Performance)
1.	Тестирование емкости/способностей (Capacity testing)
2.	Стрессовое (Stress testing)
3.	Нагрузочное (Load testing)
4.	Объемное тестирование (Volume testing)
5.	Выносливости (Soak/Endurance testing)
6.	Стабильности/надежности (Stability / Reliability testing)
7.	Шиповое (Spike)
8.	Отказоустойчивости (Stability testing)
9.	Масштабируемости (Scalability test)
- Отказ и восстановление (Failover and Recovery testing)
- Удобство пользования (Usability testing)
- Тестирование установки (Installation testing)
- Тестирование безопасности (Security and Access Control testing)
- Конфигурационное (Configuration testing)
Связанное с изменениями:
- Регрессионное (Regression testing)
- Санитарное (Sanity testing)
- Дымовое (Smoke testing)
- Тестирование сборки (Build Verification testing)

18.	Методы тестирования?
Метод белого ящика (white box testing, glass box testing) —у тестировщика есть доступ к внутренней структуре и коду приложения, а также есть достаточно знаний для понимания увиденного.
Метод чёрного ящика (black box testing— у тестировщика либо нет доступа к внутренней структуре и коду приложения, либо недостаточно знаний для их понимания, либо он сознательно не обращается к ним в процессе тестирования.
Метод серого ящика ¬– метод тестирования ПО, который предполагает комбинацию White Box и Black Box подходов. То есть, внутреннее устройство программы нам известно лишь частично. Предполагается, например, доступ к внутренней структуре и алгоритмам работы ПО для написания максимально эффективных тест-кейсов, но само тестирование проводится с помощью техники черного ящика, то есть, с позиции пользователя. Либо нам не доступна внутренняя реализация функций, но мы знаем на уровень ниже, чем пользователи – интерфейсы/эндпоинты и т.п.

19.	Что такое пирамида / уровни тестирования?
«Пирамида тестов» — визуализация, описывающая различные уровни тестирования и объем тестирования на каждом слое тестирования. 
В тесте более высокого уровня вы не тестируете всю условную логику и пограничные случаи, которые уже покрыты юнит-тестами более низкого уровня. Убедитесь, что тест высокого уровня фокусируется только на том, что не покрыто тестами более низкого уровня. Правило трех А(AAA) (arrange, act, assert) или триада «дано, когда, тогда» — хорошая мнемоника, чтобы поддерживать хорошую структуру тестов. 
 
